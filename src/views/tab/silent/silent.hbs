<!--
// Copyright (c) Microsoft Corporation
// All rights reserved.
//
// MIT License:
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->

<html>
    <head>
        <title>Silent Authentication Sample</title>
    </head>
    <body>
        <p>
            This sample demonstrates silent authentication in a Microsoft Teams tab.
        </p>
        <p>
            The tab will try to get an id token for the user silently, validate the token and show the profile information decoded from the token.
            The "Login" button will appear only if silent authentication failed.
        </p>

        <!-- Login button -->
        <button id="btnLogin" onclick="login()" style="display: none">Login to Azure AD</button>

        <!-- Result -->
        <p>
            <div id="divError" style="display: none"></div>
            <div id="divProfile" style="display: none">
                <div><b>Name:</b> <span id="profileDisplayName"/></div>
                <div><b>Object id:</b> <span id="profileObjectId"/></div>
                <div><b>UPN:</b> <span id="profileUpn"/></div>
                <div><b>Unique name:</b> <span id="profileUniqueName"/></div>
            </div>
        </p>

        <script src="https://code.jquery.com/jquery-3.1.1.js" integrity="sha384-VC7EHu0lDzZyFfmjTPJq+DFyIn8TUGAJbEtpXquazFVr00Q/OOx//RjiZ9yU9+9m" crossorigin="anonymous"></script>
        <script src="https://unpkg.com/@microsoft/teams-js@1.3.0-beta.2/dist/MicrosoftTeams.min.js" integrity="sha384-UrBZN2SXY+5Qk4UILoMd/MLHFmuorkvZSMiRtl9XB/EoGHIBFsGfb9o2MU3JDEyV" crossorigin="anonymous"></script>
        <script src="https://secure.aadcdn.microsoftonline-p.com/lib/1.0.17/js/adal.min.js" integrity="sha384-BIOS/65fbAsb2XiCCSTlZSTTl0ZgqkOU522dpyk5meOnN2EOQ3uH+QpqEtoAtmBn" crossorigin="anonymous"></script>
        <script type="text/javascript">
            microsoftTeams.initialize();
    
            // Parse query parameters
            let queryParams = getQueryParameters();
            let loginHint = queryParams["loginHint"];
            let userObjectId = queryParams["userObjectId"];

            // Use the tenant id of the current organization. For guest users, we want an access token for 
            // the tenant we are currently in, not the home tenant of the guest. 
            let tenantId = queryParams["tenantId"] || "common";

            // ADAL.js configuration
            let config = {
                tenant: tenantId,
                clientId: "{{appId}}",
                redirectUri: window.location.origin + "/tab/silent-end",     // This should be in the list of redirect uris for the AAD app
                cacheLocation: "localStorage",
                navigateToLoginRequestUrl: false,

                // Setup extra query parameters for ADAL
                // - openid and profile scope adds profile information to the id_token
                // - login_hint provides the expected user name
                extraQueryParameter: "scope=openid+profile&login_hint=" + encodeURIComponent(loginHint),
            };
            let authContext = new AuthenticationContext(config);
    
            // See if there's a cached user and it matches the expected user
            let user = authContext.getCachedUser();
            if (user) {
                if (user.profile.oid !== userObjectId) {
                    // User doesn't match, clear the cache
                    authContext.clearCache();
                }
            }
    
            // Get the id token (which is the token for resource = clientId)
            authContext.acquireToken(config.clientId, function (errDesc, token, err, tokenType) {
                if (token) {
                    // When there's no cached user, ADAL.js 1.0.17 returns an access token in the callback even when asked for the id token.
                    // To work around this bug, check the token type; if it's not an id token, get the id token from cache.
                    if (tokenType !== authContext.CONSTANTS.ID_TOKEN) {
                        console.log("ADAL.js bug: requested id_token, got " + tokenType);
                        token = authContext.getCachedToken(config.clientId);
                    }

                    showUserInformation(token);
                } else {
                    console.log("Failed to get id token silently: " + errDesc);

                    // Failed to get the id token silently; show the login button
                    $("#btnLogin").css({ display: "" });

                    // You could attempt to launch the login popup here, but in browsers this could be blocked by
                    // a popup blocker, in which case the login attempt will fail with the reason FailedToOpenWindow.
                }
            });

            // To get an access token to a resource like Graph,
            // 1. Provide the resource id to acquireToken() 
            //        authContext.acquireToken("https://graph.microsoft.com", function (errDesc, token, err, tokenType) { ... })
            // 2. Remove the check for tokenType from the callback, because access token is the correct type. 
            // 3. In the success callback below, call acquireToken again. 
    
            // Interactive login to Azure AD
            function login() {
                $("#divError").text("").css({ display: "none" });
                $("#divProfile").css({ display: "none" });

                microsoftTeams.authentication.authenticate({
                    url: window.location.origin + "/tab/silent-start",
                    width: 600,
                    height: 535,
                    successCallback: function (result) {
                        // AuthenticationContext is a singleton
                        let authContext = new AuthenticationContext();
                        let idToken = authContext.getCachedToken(config.clientId);
                        if (idToken) {
                            showUserInformation(idToken);
                        } else {
                            console.error("Error getting cached id token. This should never happen.");                            
                            // At this point we have to get the user involved, so show the login button
                            $("#btnLogin").css({ display: "" });
                        };
                    },
                    failureCallback: function (reason) {
                        console.log("Login failed: " + reason);
                        if (reason === "CancelledByUser" || reason === "FailedToOpenWindow") {
                            console.log("Login was blocked by popup blocker or canceled by user.");
                        }
                        // At this point we have to get the user involved, so show the login button
                        $("#btnLogin").css({ display: "" });

                        $("#divError").text(reason).css({ display: "" });
                        $("#divProfile").css({ display: "none" });
                    }
                });
            }
    
            // Validate the provided id_token, and show the user information from claims in the id_token.
            // This demonstrates how you might expose an API that takes the id_token as a user identity claim.
            function showUserInformation(idToken) {
                // The /api/validateToken endpoint takes an id_token in the Authorization header and attempts
                // to validate it as per (https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-token-and-claims#idtokens).
                // If successful, it returns the decoded token. Otherwise it return an HTTP 401 Unauthorized response.
                $.ajax({
                    url: window.location.origin + "/api/validateToken",
                    beforeSend: function(request) {
                        request.setRequestHeader("Authorization", "Bearer " + idToken);
                    },
                    success: function (token) {
                        $("#profileDisplayName").text(token.name);
                        $("#profileObjectId").text(token.oid);
                        $("#profileUpn").text(token.upn);

                        // The id token for a guest (external) user will not have a "upn" claim.
                        // Instead it has a "unique_name" claim, which is the username in the home organization/identity provider.
                        $("#profileUniqueName").text(token.unique_name);

                        $("#divProfile").css({ display: "" });
                        $("#divError").css({ display: "none" });
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                        $("#divError").text(errorThrown).css({ display: "" });
                        $("#divProfile").css({ display: "none" });
                    },
                });
            }

            // Parse query parameters into key-value pairs
            function getQueryParameters() {
                let queryParams = {};
                location.search.substr(1).split("&").forEach(function(item) {
                    let s = item.split("="),
                    k = s[0],
                    v = s[1] && decodeURIComponent(s[1]);
                    queryParams[k] = v;
                });
                return queryParams;
            }
        </script>
    </body>
</html>